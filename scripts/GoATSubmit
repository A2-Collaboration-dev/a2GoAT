#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;

use Cwd qw(abs_path getcwd);
use File::Path qw(rmtree mkpath);
use File::Basename qw(basename);

my $filelist = '-';             # default STDIN
my $config;                     # needs to be provided on cmd line
my $outputdir;                  # needs to be provided on cmd line
my $program = 'goat';
my $inputpre = 'Acqu';
my $outputpre = 'GoAT';
my $clean = 0;
my $help = 0;
my $cwd = getcwd;
my $QSUB_BIN = 'qsub';
my $GOAT_BIN;
# parse options
Getopt::Long::Configure(qw(gnu_getopt));
GetOptions(
           'help|h' => \$help,
           'clean|c' => \$clean,
           'prog=s' => \$program,
           'ip=s' => \$inputpre,
           'op=s' => \$outputpre
          ) or print_help();


# parse arguments
if (@ARGV==2 || @ARGV==3) {
  $config = $ARGV[0];
  $outputdir = $ARGV[1];
  if (@ARGV==3) {
    $filelist = $ARGV[2];
  }
} else {
  print_help();
}


&main;

sub main {
  # check some things before submission
  $GOAT_BIN = which($program);
  die "GoAT not found in PATH=$ENV{PATH}" unless defined $GOAT_BIN;

  # check for top-level config files
  my $haveConfig = -f $config ? 1 : 0;

  die "Error: $config config not found. Are you in the wrong working directory?"
    unless $haveConfig;


  # read in the filelist, check for more errors
  open(my $inputfiles_fh, "<$filelist") or die "Can't open filelist $filelist: $!";
  my $n = 0;
  my @files;
  while (my $inputfile = <$inputfiles_fh>) {
    $n++;
    # remove leading and trailing whitespace
    $inputfile =~ s/^\s+//;
    $inputfile =~ s/\s+$//;
    unless(-f $inputfile) {
      warn "Warning: Inputfile $inputfile does not exist, skipping.";
      next;
    }
    unless($inputfile =~ /\.root$/) {
      warn "Warning: Inputfile $inputfile does not end with .root, skipping.";
      next;
    }

    my $runnumber = $n;
    $inputfile = abs_path($inputfile);
    push(@files, [$inputfile, $runnumber]);
  }
  close $inputfiles_fh;

  my $total = scalar @files;
  die "No files to be submitted, abort." if $total==0;

  # clean/create outputdir
  if ($clean) {
    print "Deleting outputdir $outputdir\n";
    rmtree([$outputdir]) or die "Error: Outputdir $outputdir was not deleted.";
  }
  die "Error: Output dir '$outputdir' already or still exists. Maybe use --clean?" if -e $outputdir;
  mkpath(["$outputdir/log", "$outputdir/root"]) == 3 # three folders should be created
    or die "Error: Cannot create log and root folders below outputdir $outputdir";


  # for jobs, make it absolute
  $outputdir = abs_path($outputdir);
  $GOAT_BIN = abs_path($GOAT_BIN);

  # finally submit the jobs
  my $submitted = 0;
  for my $f (@files) {
    submit_file($f->[0], $f->[1]);
    $submitted++;
    printf("%-40s\r",sprintf("%04d/%04d = %03.0f %% submitted",$submitted,$total,100*$submitted/$total));
  }
  printf("%-40s\n", "Submitted $submitted jobs.");
}

sub which {
  my $cmd = shift;
  open(my $p, "which $cmd |") or die "Can't open which: $!";
  my @lines = <$p>;
  close $p;
  my $exit_value = $? >> 8;
  if ($exit_value != 0 || @lines != 1) {
    return undef;
  }
  chomp $lines[0];
  return $lines[0];
}

sub submit_file {
  my $inputfile = shift;
  my $runnumber = shift;

  my $ncpus = 3;

  my $basename = basename($inputfile);

  my $arguments = "$config -f $inputfile -D $outputdir/root -p $inputpre -P $outputpre";

  my $user = $ENV{USER};
  # open pipe to qsub
  open(my $qsub, "| $QSUB_BIN >/dev/null")
    or die "Can't open pipe to $QSUB_BIN: $!";
  print $qsub <<__BATCHSCRIPT;
#!/bin/bash
#PBS -N GoAT_$runnumber
## Send eMail if job aborts
#PBS -m a
## Send eMail when job begins
##PBS -m b
## Send eMail if job ends
##PBS -m e
#PBS -M $user\@kph.uni-mainz.de
#PBS -V
#PBS -l walltime=12:00:00
#PBS -j oe
#PBS -o $outputdir/log/$basename.log
#PBS -q batch
#PBS -l ncpus=$ncpus
echo INPUTFILE: $inputfile
cd $cwd
$GOAT_BIN $arguments
__BATCHSCRIPT
  close $qsub or die "Cannot close pipe to qsub";
}

sub print_help {
  print <<__EOF;
Usage: GoATSubmit [--clean] [--prog=program] [--ip=inputpre] [--op=outputpre] <config> <outputdir> [<filelist>|-]

Submit jobs with qsub running GoAT on files in provided <filelist>
(or read it from STDIN), output goes to <outputdir> (will be created
and must not exist already). Needs to be run from "GoAT"
directory with proper <config> existing.

Options:

  --clean   Recursively delete <outputdir> before submission.
__EOF
  exit 255;
}
